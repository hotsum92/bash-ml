#!/usr/bin/env python

import argparse
import os
import joblib
import pandas as pd
from sklearn import preprocessing as pp
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import log_loss

parser = argparse.ArgumentParser()

parser.add_argument('file_path')
parser.add_argument('-Y')
parser.add_argument('--sav')

args = parser.parse_args()
y_column = args.Y
save = args.sav

file_path = args.file_path

data = pd.read_csv(file_path)

if y_column is None:
    y_column = data.columns[-1]

dataX = data.copy().drop([y_column],axis=1)
dataY = data[y_column].copy()

columns = dataX.columns
sX = pp.StandardScaler(copy=True)
dataX.loc[:,columns] = sX.fit_transform(data.loc[:,columns])

X, y = dataX, dataY

penalty = 'l2'
C = 1.0
class_weight = 'balanced'
random_state = 2018
solver = 'liblinear'
n_jobs = 1

logReg = LogisticRegression(penalty=penalty, C=C,
            class_weight=class_weight, random_state=random_state,
                            solver=solver, n_jobs=n_jobs)

model = logReg

if save is None:
    model.fit(X, y)
else:
    if os.path.isfile(save):
        model = joblib.load(save)
    else:
        model.fit(X, y)
        joblib.dump(model, save)

loglossTraining = log_loss(y,
                           model.predict_proba(X)[:,1])

print(loglossTraining)
